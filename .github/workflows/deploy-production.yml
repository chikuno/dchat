name: Deploy to Production

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy (git tag or sha)'
        required: true
        type: string
      confirm:
        description: 'Type "deploy-to-production" to confirm'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: dchat/dchat

jobs:
  validate:
    name: Validate Deployment Request
    runs-on: ubuntu-latest
    steps:
      - name: Validate confirmation
        run: |
          if [ "${{ github.event.inputs.confirm }}" != "deploy-to-production" ]; then
            echo "Invalid confirmation. Please type 'deploy-to-production' to proceed."
            exit 1
          fi

      - name: Validate version exists
        run: |
          if ! git rev-parse "${{ github.event.inputs.version }}" >/dev/null 2>&1; then
            echo "Version ${{ github.event.inputs.version }} does not exist"
            exit 1
          fi

  security-checks:
    name: Pre-Deployment Security Checks
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.version }}

      - name: Run security audit
        run: |
          cargo install cargo-audit
          cargo audit

      - name: Check for known vulnerabilities
        run: |
          cargo install cargo-deny
          cargo deny check advisories

      - name: Scan Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.inputs.version }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          exit-code: '1'
          severity: 'CRITICAL,HIGH'

  build-production-image:
    name: Build Production Docker Image
    runs-on: ubuntu-latest
    needs: security-checks
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.version }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ github.event.inputs.version }}
            type=raw,value=production-latest
            type=semver,pattern={{version}},value=${{ github.event.inputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ github.event.inputs.version }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ github.event.inputs.version }}

  backup-current-state:
    name: Backup Current Production State
    runs-on: ubuntu-latest
    needs: build-production-image
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Backup database
        run: |
          aws rds create-db-snapshot \
            --db-instance-identifier dchat-production \
            --db-snapshot-identifier dchat-prod-pre-deploy-$(date +%Y%m%d-%H%M%S)

      - name: Export current Helm values
        run: |
          aws eks update-kubeconfig --name dchat-production --region us-east-1
          helm get values dchat-production -n production > /tmp/helm-values-backup.yaml
          aws s3 cp /tmp/helm-values-backup.yaml s3://dchat-backups/helm/prod-$(date +%Y%m%d-%H%M%S).yaml

  deploy-blue:
    name: Deploy Blue Environment
    runs-on: ubuntu-latest
    needs: backup-current-state
    environment:
      name: production-blue
      url: https://blue.dchat.network
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.version }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name dchat-production --region us-east-1

      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: '3.13.0'

      - name: Deploy blue environment
        run: |
          helm upgrade --install dchat-blue ./helm/dchat \
            --namespace production \
            --create-namespace \
            --set image.repository=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }} \
            --set image.tag=${{ github.event.inputs.version }} \
            --set environment=production \
            --set slot=blue \
            --set replicaCount=5 \
            --values ./helm/dchat/values-production.yaml \
            --wait \
            --timeout 15m

      - name: Verify blue deployment
        run: |
          kubectl rollout status deployment/dchat-blue -n production --timeout=10m
          kubectl get pods -n production -l app=dchat,slot=blue

  smoke-test-blue:
    name: Smoke Test Blue Environment
    runs-on: ubuntu-latest
    needs: deploy-blue
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.version }}

      - name: Run health checks
        run: |
          for i in {1..20}; do
            STATUS=$(curl -s -o /dev/null -w '%{http_code}' https://blue.dchat.network/health)
            if [ $STATUS -eq 200 ]; then
              echo "Health check passed"
              break
            fi
            echo "Health check failed, attempt $i/20"
            sleep 15
          done

      - name: Run integration tests
        run: |
          cargo test --test integration_tests --features production -- --test-threads=1

      - name: Run k6 smoke test
        uses: grafana/k6-action@v0.3.1
        with:
          filename: tests/load/relay_stress_test.js
          flags: --vus 10 --duration 2m --env BASE_URL=https://blue.dchat.network

  switch-traffic:
    name: Switch Traffic to Blue
    runs-on: ubuntu-latest
    needs: smoke-test-blue
    environment:
      name: production
      url: https://dchat.network
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.version }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name dchat-production --region us-east-1

      - name: Switch traffic to blue
        run: |
          kubectl patch service dchat-production -n production -p '{"spec":{"selector":{"slot":"blue"}}}'
          echo "Traffic switched to blue environment"

      - name: Wait for traffic switch
        run: sleep 30

      - name: Verify production traffic
        run: |
          for i in {1..10}; do
            STATUS=$(curl -s -o /dev/null -w '%{http_code}' https://dchat.network/health)
            if [ $STATUS -eq 200 ]; then
              echo "Production health check passed"
              exit 0
            fi
            echo "Production health check failed, attempt $i/10"
            sleep 10
          done
          exit 1

  monitor-deployment:
    name: Monitor Deployment
    runs-on: ubuntu-latest
    needs: switch-traffic
    steps:
      - name: Monitor metrics for 10 minutes
        run: |
          echo "Monitoring deployment metrics..."
          sleep 600

      - name: Check error rates
        run: |
          # Query Prometheus for error rates
          ERROR_RATE=$(curl -s "https://prometheus.dchat.network/api/v1/query?query=rate(http_requests_total{status=~'5..'}[5m])" | jq -r '.data.result[0].value[1]')
          if (( $(echo "$ERROR_RATE > 0.01" | bc -l) )); then
            echo "High error rate detected: $ERROR_RATE"
            exit 1
          fi

      - name: Check latency
        run: |
          # Query Prometheus for p95 latency
          LATENCY=$(curl -s "https://prometheus.dchat.network/api/v1/query?query=histogram_quantile(0.95,rate(http_request_duration_seconds_bucket[5m]))" | jq -r '.data.result[0].value[1]')
          if (( $(echo "$LATENCY > 0.5" | bc -l) )); then
            echo "High latency detected: $LATENCY"
            exit 1
          fi

  cleanup-green:
    name: Cleanup Green Environment
    runs-on: ubuntu-latest
    needs: monitor-deployment
    if: success()
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name dchat-production --region us-east-1

      - name: Scale down green environment
        run: |
          kubectl scale deployment dchat-green --replicas=0 -n production || echo "Green deployment not found"

  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [switch-traffic, monitor-deployment]
    if: failure()
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name dchat-production --region us-east-1

      - name: Switch traffic back to green
        run: |
          kubectl patch service dchat-production -n production -p '{"spec":{"selector":{"slot":"green"}}}'
          echo "Traffic rolled back to green environment"

      - name: Scale down blue environment
        run: |
          kubectl scale deployment dchat-blue --replicas=0 -n production

      - name: Send alert
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: |
            🚨 PRODUCTION DEPLOYMENT FAILED - ROLLED BACK 🚨
            Version: ${{ github.event.inputs.version }}
            Triggered by: ${{ github.actor }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  notify-success:
    name: Notify Successful Deployment
    runs-on: ubuntu-latest
    needs: [cleanup-green]
    if: success()
    steps:
      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: |
            ✅ PRODUCTION DEPLOYMENT SUCCESSFUL ✅
            Version: ${{ github.event.inputs.version }}
            Deployed by: ${{ github.actor }}
            URL: https://dchat.network
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

      - name: Create GitHub release
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: '${{ github.event.inputs.version }}',
              name: 'Production Release ${{ github.event.inputs.version }}',
              body: 'Deployed to production on ' + new Date().toISOString(),
              draft: false,
              prerelease: false
            });

      - name: Update deployment status
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: '${{ github.event.inputs.version }}',
              environment: 'production',
              auto_merge: false,
              required_contexts: []
            });
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: 'success',
              environment_url: 'https://dchat.network',
              description: 'Production deployment successful'
            });
