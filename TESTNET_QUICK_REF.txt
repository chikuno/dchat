=== dchat TESTNET QUICK REFERENCE ===

BUILD STATUS: ✅ SUCCESS (Release build complete)
DATE: October 28, 2025
VERSION: dchat v0.1.0

=== QUICK START: 3-NODE TESTNET ===

1. GENERATE TESTNET:
   dchat testnet --validators 3 --relays 3 --clients 5

2. START RELAY MESH:
   # Terminal 1
   dchat relay --listen 0.0.0.0:7070 --stake 1000
   
   # Terminal 2
   dchat relay --listen 0.0.0.0:7072 --stake 1000
   
   # Terminal 3
   dchat relay --listen 0.0.0.0:7074 --stake 1000

3. START VALIDATORS:
   # Terminal 4
   dchat validator --key ./testnet-data/validators/validator_0.key \
     --chain-rpc http://localhost:26657 --stake 10000 --producer
   
   # Terminal 5 & 6
   dchat validator --key ./testnet-data/validators/validator_1.key \
     --chain-rpc http://localhost:26657 --stake 10000

4. START CLIENTS:
   # Terminal 7
   dchat user --username Alice
   
   # Terminal 8 (test mode)
   dchat user --username TestBot --non-interactive

=== ALL COMMANDS ===

RELAY:
  dchat relay [--listen ADDR] [--bootstrap PEERS...] [--stake AMOUNT]
  
VALIDATOR:
  dchat validator --key PATH --chain-rpc URL [--stake AMOUNT] [--producer]
  
USER:
  dchat user [--username NAME] [--identity PATH] [--non-interactive]
  
TESTNET:
  dchat testnet [--validators N] [--relays N] [--clients N] [--data-dir PATH]
  
HEALTH:
  curl http://localhost:8080/health
  curl http://localhost:8080/ready
  
METRICS:
  curl http://localhost:9090/metrics

=== DOCKER DEPLOYMENT ===

EXISTING RELAY MESH:
  docker-compose up -d
  docker-compose logs -f relay1 relay2 relay3
  
GENERATED TESTNET:
  cd testnet-data
  docker-compose -f docker-compose.json up -d
  
=== KEY FILES ===

Generated by testnet command:
  - genesis.json              # Chain genesis config
  - testnet-info.json         # Network coordination
  - docker-compose.json       # Container orchestration
  - validators/validator_*.key # Validator keys

=== HEALTH CHECKS ===

Relay:     http://localhost:8080/health
Validator: http://localhost:8081/health
Client:    Local only (no server)

=== OBSERVABILITY ===

Metrics:     http://localhost:9090/metrics
Prometheus:  http://localhost:9090 (if enabled)
Grafana:     http://localhost:3000 (if enabled)
Jaeger:      http://localhost:16686 (if enabled)

=== IMPLEMENTATION STATUS ===

✅ Relay nodes - P2P routing, staking, rewards
✅ Validator nodes - Consensus, block production
✅ User clients - Interactive chat, channels
✅ Testnet orchestration - Full automation
✅ Genesis configuration - Validator set
✅ Docker compose - Multi-node deployment
✅ Health & metrics - Monitoring ready

=== FEATURES ===

Relay Nodes:
  • Message routing and forwarding
  • Staking (default: 1000 tokens)
  • Bandwidth limiting (10 MB/s)
  • Proof-of-delivery rewards
  • Docker auto-discovery

Validator Nodes:
  • Consensus participation
  • Block production (6s intervals)
  • Block validation
  • Staking (default: 10000 tokens)
  • Graceful unstaking on shutdown

User Clients:
  • Interactive CLI mode
  • Non-interactive test mode
  • Channel subscriptions
  • Message sending/receiving
  • Identity management

=== NEXT STEPS ===

1. Test relay mesh: 3 relays + 2 clients
2. Test validators: 3 validators with consensus
3. Full integration: 3 validators + 3 relays + 5 clients
4. Monitor network health and message flow
5. Deploy public testnet

=== DOCUMENTATION ===

TESTNET_LAUNCH_GUIDE.md           # Complete deployment guide
TESTNET_IMPLEMENTATION_COMPLETE.md # Implementation details
ARCHITECTURE.md                    # System architecture
API_SPECIFICATION.md               # Protocol specification
SECURITY_MODEL.md                  # Threat model

=== SUPPORT ===

Issues: See error logs with --log-level debug
Health: Check /health endpoints
Metrics: Query Prometheus metrics
Docs: Read TESTNET_LAUNCH_GUIDE.md

=== BUILD INFO ===

Build: cargo build --release
Binary: ./target/release/dchat
Time: 9m 53s
Size: Optimized release build
Platform: Windows/Linux/macOS

==================================
