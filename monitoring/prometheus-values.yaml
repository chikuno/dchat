# Prometheus Operator Helm values for dchat monitoring
prometheus:
  prometheusSpec:
    # Resource requests and limits
    resources:
      requests:
        cpu: 1000m
        memory: 2Gi
      limits:
        cpu: 2000m
        memory: 4Gi
    
    # Storage configuration
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: gp3
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 100Gi
    
    # Data retention
    retention: 30d
    retentionSize: "90GB"
    
    # ServiceMonitor selector
    serviceMonitorSelector:
      matchLabels:
        app.kubernetes.io/name: dchat
    
    # PodMonitor selector
    podMonitorSelector:
      matchLabels:
        app.kubernetes.io/name: dchat
    
    # Rule selector
    ruleSelector:
      matchLabels:
        app: dchat
        prometheus: monitoring
    
    # External labels
    externalLabels:
      cluster: production
      environment: production
    
    # Remote write configuration (optional - for long-term storage)
    # remoteWrite:
    #   - url: https://prometheus-prod-10-prod-us-central-0.grafana.net/api/prom/push
    #     basicAuth:
    #       username:
    #         name: prometheus-remote-write
    #         key: username
    #       password:
    #         name: prometheus-remote-write
    #         key: password

# Grafana configuration
grafana:
  enabled: true
  
  # Admin credentials
  adminPassword: "${GRAFANA_ADMIN_PASSWORD}"
  
  # Resource requests and limits
  resources:
    requests:
      cpu: 500m
      memory: 1Gi
    limits:
      cpu: 1000m
      memory: 2Gi
  
  # Persistence
  persistence:
    enabled: true
    storageClassName: gp3
    size: 10Gi
  
  # Ingress configuration
  ingress:
    enabled: true
    ingressClassName: alb
    annotations:
      alb.ingress.kubernetes.io/scheme: internet-facing
      alb.ingress.kubernetes.io/target-type: ip
      alb.ingress.kubernetes.io/certificate-arn: "${CERTIFICATE_ARN}"
      alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
      alb.ingress.kubernetes.io/ssl-redirect: "443"
    hosts:
      - grafana.dchat.example.com
    tls:
      - secretName: grafana-tls
        hosts:
          - grafana.dchat.example.com
  
  # Dashboard providers
  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
        - name: 'dchat'
          orgId: 1
          folder: 'dchat'
          type: file
          disableDeletion: false
          editable: true
          options:
            path: /var/lib/grafana/dashboards/dchat
  
  # Dashboard ConfigMaps
  dashboardsConfigMaps:
    dchat: "dchat-dashboards"
  
  # Data sources
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
        - name: Prometheus
          type: prometheus
          url: http://monitoring-kube-prometheus-prometheus:9090
          access: proxy
          isDefault: true
          jsonData:
            timeInterval: 30s

# AlertManager configuration
alertmanager:
  enabled: true
  
  alertmanagerSpec:
    # Resource requests and limits
    resources:
      requests:
        cpu: 100m
        memory: 256Mi
      limits:
        cpu: 200m
        memory: 512Mi
    
    # Storage
    storage:
      volumeClaimTemplate:
        spec:
          storageClassName: gp3
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 10Gi
    
    # External URL for links in alerts
    externalUrl: "https://alertmanager.dchat.example.com"
  
  # AlertManager configuration
  config:
    global:
      resolve_timeout: 5m
      slack_api_url: "${SLACK_WEBHOOK_URL}"
      pagerduty_url: https://events.pagerduty.com/v2/enqueue
    
    route:
      receiver: 'default'
      group_by: ['alertname', 'cluster', 'service']
      group_wait: 10s
      group_interval: 10s
      repeat_interval: 12h
      routes:
        # Critical alerts go to PagerDuty immediately
        - match:
            severity: critical
          receiver: pagerduty-critical
          continue: true
        
        # High severity alerts go to Slack
        - match:
            severity: high
          receiver: slack-high
          continue: true
        
        # Warning alerts go to Slack with lower priority
        - match:
            severity: warning
          receiver: slack-warnings
    
    receivers:
      - name: 'default'
        slack_configs:
          - channel: '#dchat-alerts'
            title: '{{ .GroupLabels.alertname }}'
            text: '{{ range .Alerts }}{{ .Annotations.description }}{{ end }}'
      
      - name: 'pagerduty-critical'
        pagerduty_configs:
          - service_key: "${PAGERDUTY_SERVICE_KEY}"
            severity: critical
            description: '{{ .GroupLabels.alertname }}: {{ .CommonAnnotations.summary }}'
            details:
              firing: '{{ .Alerts.Firing | len }}'
              resolved: '{{ .Alerts.Resolved | len }}'
      
      - name: 'slack-high'
        slack_configs:
          - channel: '#dchat-alerts'
            color: danger
            title: '[HIGH] {{ .GroupLabels.alertname }}'
            text: '{{ range .Alerts }}{{ .Annotations.description }}{{ end }}'
      
      - name: 'slack-warnings'
        slack_configs:
          - channel: '#dchat-monitoring'
            color: warning
            title: '[WARNING] {{ .GroupLabels.alertname }}'
            text: '{{ range .Alerts }}{{ .Annotations.description }}{{ end }}'

# Node Exporter (for host metrics)
nodeExporter:
  enabled: true

# Kube State Metrics (for Kubernetes metrics)
kubeStateMetrics:
  enabled: true

# Default rules
defaultRules:
  create: true
  rules:
    alertmanager: true
    etcd: false
    configReloaders: true
    general: true
    k8s: true
    kubeApiserverAvailability: true
    kubeApiserverSlos: true
    kubelet: true
    kubeProxy: false
    kubePrometheusGeneral: true
    kubePrometheusNodeRecording: true
    kubernetesApps: true
    kubernetesResources: true
    kubernetesStorage: true
    kubernetesSystem: true
    kubeScheduler: false
    kubeStateMetrics: true
    network: true
    node: true
    nodeExporterAlerting: true
    nodeExporterRecording: true
    prometheus: true
    prometheusOperator: true
